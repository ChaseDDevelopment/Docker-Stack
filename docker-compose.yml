version: "3.7"
services:

########################### NETWORKS

networks:
  solar_flare:
    external:
      name: solar_flare
  default:
    driver: bridge
  socket_proxy:
    external:
      name: socket_proxy

volumes:
  duplicati:
########################### SECRETS
secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  my_email:
    file: $SECRETSDIR/my_email
  authelia_jwt_secret:
    file: $SECRETSDIR/authelia_jwt_secret
  authelia_session_secret:
    file: $SECRETSDIR/authelia_session_secret
  authelia_storage_mysql_password:
    file: $SECRETSDIR/authelia_storage_mysql_password
  authelia_session_redis_password:
    file: $SECRETSDIR/authelia_session_redis_password

############################# SERVICES
services:
    ############################# Proxy & OAUTH
      traefik:
        container_name: traefik
        image: traefik:v2.4.6
        restart: unless-stopped
        command:  
          - --global.checkNewVersion=true
          - --global.sendAnonymousUsage=false
          - --entryPoints.http.address=:80
          - --entryPoints.https.address=:443
          #Allow these IPs to set the X-Fowarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
          - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
          - --api=true
          - --api.dashboard=true
          #- --ping=true
          #- --pilot.token=$TRAEFIK_PILOT_TOKEN
          - --serversTransport.insecureSkipVerify=true
          - --log=true
          - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
          - --accessLog=true
          - --accessLog.filePath=/traefik.log
          - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
          - --accessLog.filters.statusCodes=400-499
          - --providers.docker=true
          #- --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
          - --providers.docker.endpoint=tcp://socket-proxy:2375
          # Automatically set Host rule for services
    #      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
          - --providers.docker.exposedByDefault=false
          # - --entrypoints.https.http.middlewares=chain-authelia@file
          - --entrypoints.https.http.tls.options=tls-opts@file
          # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
          - --entrypoints.https.http.tls.certresolver=dns-cloudflare
          - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
          - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
          - --entrypoints.https.http.tls.domains[1].main=$DOMAIN2 # Pulls main cert for second domain
          - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAIN2 # Pulls wildcard cert for second domain
          - --providers.docker.network=solar_flare
          - --providers.docker.swarmMode=false
          - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
          # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
          - --providers.file.watch=true # Only works on top level files in the rules folder
    #      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
          - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
          - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
          - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
          - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
          - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
        networks:
          solar_flare:
            ipv4_address: 192.168.2.2
          socket_proxy:
            ipv4_address: 192.168.3.2
        depends_on:
          - socket-proxy
        security_opt:
          - no-new-privileges:true
        #healthcheck:
        #  test: ["CMD", "traefik", "healthcheck", "--ping"]
        #  interval: 5s
        #  retries: 3
        ports:
          - target: 80
            published: 80
            protocol: tcp
            mode: host
          - target: 443
            published: 443
            protocol: tcp
            mode: host
        volumes:
          - $DOCKERDIR/traefik2/rules:/rules # file provider directory
          - $DOCKERDIR/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
          - $DOCKERDIR/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
          - $DOCKERDIR/shared:/shared
        secrets:
          - cloudflare_email
          - cloudflare_api_key
        environment:
          - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
          - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
        labels:
          #- "autoheal=true"
          - "traefik.enable=true"
          # HTTP-to-HTTPS Redirect
          - "traefik.http.routers.http-catchall.entrypoints=http"
          - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
          - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
          - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
          # HTTP Routers
          - "traefik.http.routers.traefik-rtr.entrypoints=http"
          - "traefik.http.routers.traefik-rtr.tls.options=tls-opts@file"
          - "traefik.http.routers.traefik-rtr.entrypoints=https"
          - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
          ## Services - API
          - "traefik.http.routers.traefik-rtr.service=api@internal"
          ## Healthcheck/ping
          #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
          #- "traefik.http.routers.ping.tls=true"
          #- "traefik.http.routers.ping.service=ping@internal"
          ## Middlewares
          - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"
    
    
    
    
      # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
      socket-proxy:
        container_name: socket-proxy
        image: fluencelabs/docker-socket-proxy
        restart: unless-stopped
        networks:
          # solar_flare:
          socket_proxy:
            ipv4_address: 192.168.3.3 # You can specify a static IP
        privileged: true
        ports:
          - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network.
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
        deploy:
          resources:
            limits:
              cpus: '0.75'
              memory: 4096M
            reservations:
              memory: 1024M
        environment:
          - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
          ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
          # 0 to revoke access.
          # 1 to grant access.
          ## Granted by Default
          - EVENTS=1
          - PING=1
          - VERSION=1
          ## Revoked by Default
          # Security critical
          - AUTH=0
          - SECRETS=0
          - POST=1 # Watchtower
          - DELETE=1 # Watchtower
            # GET Optons
          - BUILD=0
          - COMMIT=0
          - CONFIGS=0
          - CONTAINERS=1 # Traefik, portainer, etc.
          - DISTRIBUTION=0
          - EXEC=0
          - IMAGES=1 # Portainer, Watchtower
          - INFO=1 # Portainer
          - NETWORKS=1 # Portainer, Watchtower
          - NODES=0
          - PLUGINS=0
          - SERVICES=1 # Portainer
          - SESSION=0
          - SWARM=0
          - SYSTEM=0
          - TASKS=1 # Portaienr
          - VOLUMES=1 # Portainer
          # POST Options
          - CONTAINERS_CREATE=1 # WatchTower
          - CONTAINERS_START=1 # WatchTower
          - CONTAINERS_UPDATE=1 # WatchTower
          # DELETE Options
          - CONTAINERS_DELETE=1 # WatchTower
          - IMAGES_DELETE=1 # WatchTower
    
      # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
      authelia:
        container_name: authelia
        # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
        image: authelia/authelia:latest
        restart: always
        networks:
          solar_flare:
            ipv4_address: 192.168.2.3
        ports:
          - "$AUTHELIA_PORT:9091"
        volumes:
          - $DOCKERDIR/authelia:/config
          - $DOCKERDIR/authelia/tmp:/tmp/authelia/
        environment:
          - TZ=$TZ
      #    - PUID=$PUID
       #   - PGID=$PGID
          - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/authelia_session_redis_password
          - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
          - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
          - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
        secrets:
          - authelia_jwt_secret
          - authelia_session_secret
          - authelia_storage_mysql_password
          - authelia_session_redis_password
        labels:
          - "traefik.enable=true"
          ## HTTP Routers
          - "traefik.http.routers.authelia-rtr.entrypoints=https"
          - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME`)"
          - "traefik.http.routers.authelia-rtr.tls=true"
          ## Middlewares
          - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
          ## HTTP Services
          - "traefik.http.routers.authelia-rtr.service=authelia-svc"
          - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: unless-stopped
    command: -H tcp://socket-proxy:2375
    networks:
      solar_flare:
        ipv4_address: 192.168.2.6
      socket_proxy:
        ipv4_address: 192.168.3.5
    security_opt:
      - no-new-privileges:true
    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/docker/portainer/data:/data 
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    environment:
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"